##################
类成员函数指针调用
##################
:category: Computer
:tags: C/C++
:date: 2008-01-20 03:12



关键字：???设计模式 类成员函数指针调用

实例代码:

.. code-block :: cpp

   #include <iostream>
   #include <vector>
   using namespace std;
   
   class CBase
   {
   public:
       typedef void (CBase::*PFUNC)();
   
       virtual void OnCall1() = 0;
       virtual void OnCall2() = 0;
   };
   
   typedef vector<CBase*> BASES;
   
   class CKid1 : public CBase
   {
   public:
       virtual void OnCall1(){
           cout<<"CKid1::OnCall1"<<endl;
       }
       virtual void OnCall2(){
           cout<<"CKid1::OnCall2"<<endl;
       }
   };
   
   class CKid2 : public CBase
   {
   public:
       virtual void OnCall1(){
           cout<<"CKid2::OnCall1"<<endl;
       }
       virtual void OnCall2(){
           cout<<"CKid2::OnCall2"<<endl;
       }
   };
   
   class CController
   {
       static const CBase::PFUNC m_funcs[];
   
       void call(int idx,BASES& objs);
   public:
       void Call1(BASES& objs){
           call(1,objs);
       }
   
       void Call2(BASES& objs){
           call(2,objs);
       }
   };
   
   const CBase::PFUNC CController::m_funcs[]={
       &CBase::OnCall1,
       &CBase::OnCall2,
   };
   
   void CController::call(int idx,BASES& objs)
   {
       for(BASES::iterator pos=objs.begin();pos!=objs.end();++pos){
           ((*pos)->*(m_funcs[idx-1]))();
       }
   }
   
   int main()
   {
       CKid1 k1[2];
       CKid2 k2[3];
   
       BASES bases;
   
       for(int i=0;i<sizeof(k1)/sizeof(CKid1);i++){
           bases.push_back(&k1[i]);
       }
   
       for(int i=0;i<sizeof(k2)/sizeof(CKid2);i++){
           bases.push_back(&k2[i]);
       }
   
       CController con;
   
       cout<<"call all func1"<<endl;
       con.Call1(bases);
   
       cout<<"call all func2"<<endl;
       con.Call2(bases);
   
       return 0;
   }

以上代码的输出为::

 call all func1
 CKid1::OnCall1
 CKid1::OnCall1
 CKid2::OnCall1
 CKid2::OnCall1
 CKid2::OnCall1
 call all func2
 CKid1::OnCall2
 CKid1::OnCall2
 CKid2::OnCall2
 CKid2::OnCall2
 CKid2::OnCall2

