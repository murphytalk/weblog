####################################
Python is not Java
####################################
:category: Computer
:tags: Python
:date: 2005-02-23 17:00



is not any other static type language too ...

dirtSimple.org一篇"不错的文章":http://dirtsimple.org/2004/12/python-is-not-java.html 是作者在看了一帮刚刚拿起Python的java程序员写的一个性能很不怎么样的程序的代码后有感而发，他总结了几个，我想适用于和其他静态类型语言包括C++：

1 不要把Java的静态函数在Python中“翻译”作类的方法：从逻辑上来讲Java的类的静态方法更类似于Python一个模块级别的函数。此外调用Foo.Foo.someMethod这样的东西在Python里是要有代价的，因为作为一个全动态的脚本语言Python得在运行时定位这些函数的位置，而java之类的语言则在编译时确定下来了。对于Python来说 Flat is better than nested 。

2 (巨大或者访问频繁的)switch-case在Python中应该通过dictionary来做。据他说Python的dictionary是已知的宇宙里优化最充分的hash table实现，除非你是Guido, Tim Peters 和Raymond Hettinger的“genetically-enhanced love child”，否则你不会做得更好;)

3 不到万不得已，绝对不要使用XML。而他给出的“万不得已”的例子是写一个XML编辑器;)我喜欢他引用"自此":http://fishbowl.pastiche.org/2003/08/18/beware_regular_expressions 但经过篡改了的话:*Some people, when confronted with a problem, think “I know, I’ll use XML.” Now they have two problems.* 原文是说正则表达式的。他的意思是java之所以大量使用用xml是因为xml可以带来java所不具备的灵活性，而作为动态的脚本语言Python远比xml来得灵活和强大，所以为什么还要让你的Python程序再背上一个包袱呢？所以 Drop that schema and put your hands in the air, now! 哈哈。

4 绝对不要用getters和setters。Python的属性也是全动态的，没有必要象Java那样为了保护私有成员而写getters和setters，在Python中修改类成员不会造成客户代码无法运行（当然运行不正常还是有可能的）。

5 没有必要重复代码。Java苦于是强类型倚赖的而又缺少C++的模版机制(至少是开始时缺少)，所以因为数据类型不同就得重复逻辑几乎一样的代码是没有办法的事。他给了个我倒没怎么试过的小花招：返回inner function。比如你有如下重复代码::

 def addOne(x): return x+1
 def addTwo(x): return x+2

可以把它们改成::

 def makeAdder(addend):
     def add_it(x): return x+addend
     return add_it

 #use it like this:

 addOne = makeAdder(1)
 addTwo = makeAdder(2)

用Python写程序时要多思考一下如何发挥它的全动态特性，这对于习惯了静态、强类型语言的人来说还是很不一样的。
 