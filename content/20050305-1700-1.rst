######################
Python的文件操作
######################
:category: Computer
:tags: Python
:date: 2005-03-05 17:00



摘自 `DevShed <http://www.devshed.com/c/a/Python/File-Management-in-Python>`_ 

**得到文件信息**::

 import os

 import stat

 import time

 fileStats = os.stat ( 'test.txt' )

 fileInfo = {

    'Size' : fileStats [ stat.ST_SIZE ],

    'LastModified' : time.ctime ( fileStats [ stat.ST_MTIME ] ),

    'LastAccessed' : time.ctime ( fileStats [ stat.ST_ATIME ] ),

    'CreationTime' : time.ctime ( fileStats [ stat.ST_CTIME ] ),

    'Mode' : fileStats [ stat.ST_MODE ]

 }

 for infoField, infoValue in fileInfo:

    print infoField, ':' + infoValue

 if stat.S_ISDIR ( fileStats [ stat.ST_MODE ] ):

    print 'Directory. '

 else:

    print 'Non-directory.'

stat还有一大堆其他的S_IS_XXX供判断文件属性和类型用。


**文件名匹配**

可以用fnmatch模块::

 import fnmatch

 import os

 for fileName in os.listdir ( '/' ):

    if fnmatch.fnmath ( fileName, '*.txt' ):

       print open ( fileName ).read()

    elif fnmatch.fnmatch ( fileName, '*.exe' ):

       print fileName

或者glob模块，可以使用正则表达式匹配::

 import glob

 for fileName in glob.glob ( '[0-9].txt' ):

    print fileName

**对象序列化**

在Python里对象序列化被称为**pickling**::

 import pickle

 fileHandle = open ( 'pickleFile.txt', 'w' )

 testList = [ 'This', 2, 'is', 1, 'a', 0, 'test.' ]

 pickle.dump ( testList, fileHandle )

 fileHandle.close()

 #Unpickling the data is just as easy:

 fileHandle = open ( 'pickleFile.txt' )

 testList = pickle.load ( fileHandle )

 fileHandle.cloes()

数值型对象也可被序列化，用cPickle要比普通的pickle快些::

 import cPickle

 fileHandle = open ( 'pickleFile.txt', 'w' )

 cPickle.dump ( 1776, fileHandle )

 fileHandle.close()

**内存文件**

很多模块需要一个文件对象作为参数，此时可以考虑使用内存文件::

 import StringIO

 fileHandle = StringIO.StringIO ( "Let freedom ring." )

 print fileHandle.read() # "Let freedom ring."

 fileHandle.close()

另外还有一个cStringIO模块，使用方法同上，但是速度要快些。它和StringIO模块的区别主要在于:

1 无法从其派生自己的IO类。有这个需求的话得用StringIO模块；

2 不接受无法转换为plain text的unicode字符串；

3 用string型创建的对象是只读的。


